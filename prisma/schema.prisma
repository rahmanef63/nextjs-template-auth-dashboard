// This is your updated Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Role {
  id          String    @id @default(cuid())
  name        String    @unique
  type        String    @default("CUSTOM") // Can be: ADMIN, MANAGER, STAFF, CLIENT, CUSTOM
  permissions Permission[]
  users       User[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([name])
}

model User {
  id               String          @id @default(cuid())
  email            String          @unique
  name             String?
  password         String
  role             Role            @relation(fields: [roleId], references: [id])
  roleId           String
  profile          Profile?
  sessions         Session[]
  createdReports   Report[]        @relation("ReportCreator")
  assignedReports  Report[]        @relation("AssignedTo")
  feedbacks        Feedback[]
  notifications    Notification[]
  auditLogs        AuditLog[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  deletedAt        DateTime?

  @@index([email])
}

model Permission {
  id        String    @id @default(cuid())
  name      String    @unique
  roles     Role[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Profile {
  id        String   @id @default(cuid())
  bio       String?
  avatarUrl String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id        String   @id @default(cuid())
  sessionId String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Report {
  id          String   @id @default(cuid())
  title       String
  content     String
  status      String   @default("PENDING")
  createdBy   User     @relation("ReportCreator", fields: [creatorId], references: [id])
  creatorId   String
  assignedTo  User     @relation("AssignedTo", fields: [assignedId], references: [id])
  assignedId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([creatorId])
  @@index([assignedId])
}

model Widget {
  id            String   @id @default(cuid())
  name          String
  type          String
  configuration String   // Changed from Json to String for SQLite compatibility
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

/// New Models Added Below ///

model Announcement {
  id        String   @id @default(cuid())
  title     String
  date      DateTime
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feedback {
  id            String   @id @default(cuid())
  user          User?    @relation(fields: [userId], references: [id])
  userId        String?
  feedbackText  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Mockup {
  id          String   @id @default(cuid())
  title       String
  description String
  image       String
  category    String
  stars       Int      @default(0)
  downloads   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Prototype {
  id          String   @id @default(cuid())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Review {
  id          String   @id @default(cuid())
  title       String
  description String
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Template {
  id        String   @id @default(cuid())
  type      String   // e.g., Page, Email, Document
  name      String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wireframe {
  id           String   @id @default(cuid())
  title        String
  status       String
  lastModified DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Notification {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  type        String
  title       String
  description String
  time        DateTime
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Site {
  id          String     @id @default(cuid())
  name        String
  location    String
  status      String
  startDate   DateTime
  teamSize    Int
  budget      Budget?
  progress    Progress[]
  schedules   Schedule[]
  contracts   Contract[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Budget {
  id          String   @id @default(cuid())
  site        Site     @relation(fields: [siteId], references: [id])
  siteId      String   @unique
  totalBudget Float
  expenses    Float
  remaining   Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Progress {
  id        String   @id @default(cuid())
  site      Site     @relation(fields: [siteId], references: [id])
  siteId    String
  progress  Int      // Percentage (0-100)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Schedule {
  id          String   @id @default(cuid())
  site        Site     @relation(fields: [siteId], references: [id])
  siteId      String
  date        DateTime
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Contract {
  id          String   @id @default(cuid())
  name        String
  document    String   // Path or URL to PDF document
  site        Site     @relation(fields: [siteId], references: [id])
  siteId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  details   String?
  resource  String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}
