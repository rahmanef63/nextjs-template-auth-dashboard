// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SortOrder {
  asc
  desc
}

enum RoleType {
  SUPER_ADMIN
  ADMIN
  POWER_USER
  STANDARD
  RESTRICTED
  CUSTOM
}

enum PlanType {
  FREE
  PRO
  ENTERPRISE
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

enum ReportStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
  CANCELLED
}

enum NotificationType {
  SYSTEM
  REPORT
  MESSAGE
  ALERT
  INFO
  COMMENT
  MENTION
  ASSIGNMENT
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  type        RoleType     @default(STANDARD)
  isSystem    Boolean      @default(false)
  permissions Permission[] @relation("RolePermissions")
  users       User[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([name])
}

model User {
  id              String         @id @default(cuid())
  email           String         @unique
  name            String?
  password        String
  roleId          String
  plan            PlanType       @default(FREE)
  status          UserStatus     @default(ACTIVE)
  lastLoginAt     DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  deletedAt       DateTime?
  metadata        Json?          // For extensible user data
  auditLogs       AuditLog[]
  feedbacks       Feedback[]
  notifications   Notification[]
  profile         Profile?
  assignedReports Report[]       @relation("AssignedTo")
  createdReports  Report[]       @relation("ReportCreator")
  sessions        Session[]
  role            Role           @relation(fields: [roleId], references: [id])
  accessLogs      AccessLog[]
  roleType        RoleType       @default(STANDARD) // Updated to use new role types

  @@index([email])
}

model Permission {
  id        String   @id @default(cuid())
  name      String
  resource  String   // The resource this permission applies to
  action    String   // The action allowed on the resource (e.g., read, write, etc)
  roles     Role[]   @relation("RolePermissions")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([resource, action])
}

model Profile {
  id          String    @id @default(cuid())
  bio         String?
  avatarUrl   String?
  phone       String?
  language    String    @default("en")
  timeZone    String    @default("UTC")
  userId      String    @unique
  memberSince DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id @default(cuid())
  sessionId String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Report {
  id         String       @id @default(cuid())
  title      String
  content    String
  status     ReportStatus @default(PENDING)
  creatorId  String
  assignedId String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  assignedTo User         @relation("AssignedTo", fields: [assignedId], references: [id])
  createdBy  User         @relation("ReportCreator", fields: [creatorId], references: [id])

  @@index([creatorId])
  @@index([assignedId])
}

model Widget {
  id            String   @id @default(cuid())
  name          String
  type          String
  configuration String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  date      DateTime
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feedback {
  id           String   @id @default(cuid())
  userId       String?
  feedbackText String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id])
}

model Mockup {
  id          String   @id @default(cuid())
  title       String
  description String
  image       String
  category    String
  stars       Int      @default(0)
  downloads   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Prototype {
  id          String   @id @default(cuid())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Review {
  id          String   @id @default(cuid())
  title       String
  description String
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Template {
  id        String   @id @default(cuid())
  type      String
  name      String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wireframe {
  id           String   @id @default(cuid())
  title        String
  status       String
  lastModified DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType @default(SYSTEM)
  isRead    Boolean          @default(false)
  userId    String
  metadata  Json?            // For additional notification data
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([isRead])
}

model Site {
  id        String     @id @default(cuid())
  name      String
  location  String
  status    String
  startDate DateTime
  teamSize  Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  budget    Budget?
  contracts Contract[]
  progress  Progress[]
  schedules Schedule[]
}

model Budget {
  id          String   @id @default(cuid())
  siteId      String   @unique
  totalBudget Float
  expenses    Float
  remaining   Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  site        Site     @relation(fields: [siteId], references: [id])
}

model Progress {
  id        String   @id @default(cuid())
  siteId    String
  progress  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  site      Site     @relation(fields: [siteId], references: [id])
}

model Schedule {
  id          String   @id @default(cuid())
  siteId      String
  date        DateTime
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  site        Site     @relation(fields: [siteId], references: [id])
}

model Contract {
  id        String   @id @default(cuid())
  name      String
  document  String
  siteId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  site      Site     @relation(fields: [siteId], references: [id])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  details   String?
  resource  String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model AccessLog {
  id        String   @id @default(cuid())
  userId    String
  resource  String
  action    String
  success   Boolean
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([resource])
}
